#Recreate the Pong game.

##MAIN.PY
from turtle import Screen
from paddle import Paddle
from ball import Ball
from scoreboard import Scoreboard
import time

screen = Screen()
screen.setup(width=800, height=600)
screen.bgcolor("black")
screen.title("PONG")
screen.tracer(0)

r_paddle = Paddle((350,0))
l_paddle = Paddle((-350,0))

ball = Ball()
scoreboard = Scoreboard()

screen.listen()
screen.onkeypress(r_paddle.moveup, "Up")
screen.onkeypress(r_paddle.movedown, "Down")
screen.onkeypress(l_paddle.moveup, "w")
screen.onkeypress(l_paddle.movedown, "s")

game_on = True

while game_on:
    time.sleep(ball.move_speed)
    screen.update()
    ball.move()

    # Detect collision with top/bottom
    if ball.ycor() > 280 or ball.ycor() < -280:
        ball.bounce_y()

    # Detect collision with paddles
    if (ball.distance(r_paddle) < 50 and ball.xcor() > 320) or (ball.distance(l_paddle) < 50 and ball.xcor() < -320):
        ball.bounce_x()

    # Detect ball out of bounds
    if ball.xcor() > 380:
        ball.refresh()
        scoreboard.add_l_score()

    elif ball.xcor() < -380:
        ball.refresh()
        scoreboard.add_r_score()

screen.exitonclick()

##PADDLE.PY
from turtle import Turtle

MOVE_DISTANCE = 20


class Paddle(Turtle):

    def __init__(self, position):
        super().__init__()
        self.penup()
        self.color("white")
        self.shape("square")
        self.shapesize(stretch_wid=5, stretch_len=1, outline=None)
        self.goto(position)

    def moveup(self):
        self.goto(self.xcor(), self.ycor()+MOVE_DISTANCE)

    def movedown(self):
        self.goto(self.xcor(), self.ycor()-MOVE_DISTANCE)

##BALL.PY
from turtle import Turtle


class Ball(Turtle):

    def __init__(self):
        super().__init__()
        self.penup()
        self.color("white")
        self.shape("circle")
        self.x_move = 10
        self.y_move = 10
        self.move_speed = 0.1

    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x, new_y)

    def bounce_y(self):
        self.y_move *= -1

    def bounce_x(self):
        self.x_move *= -1
        self.move_speed *= 0.9

    def refresh(self):
        self.goto(0, 0)
        self.move_speed = 0.1
        self.bounce_x()
        
##SCOREBOARD.PY
from turtle import Turtle

ALIGNMENT = "center"
FONT = ("Arial", 50, "normal")


class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.color("white")
        self.hideturtle()
        self.penup()
        self.goto(0, 260)
        self.l_score = 0
        self.r_score = 0
        self.print_score()

    def add_l_score(self):
        self.l_score += 1
        self.print_score()

    def add_r_score(self):
        self.r_score += 1
        self.print_score()

    def print_score(self):
        self.clear()
        self.goto(-100, 200)
        self.write(self.l_score, align=ALIGNMENT, font=FONT)
        self.goto(100, 200)
        self.write(self.r_score, align=ALIGNMENT, font=FONT)

    def gameover(self):
        self.goto(0, 0)
        self.write("GAME OVER", align=ALIGNMENT, font=FONT)
